
#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, I2C_1,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_2,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Motor,  port1,           treadmill1,    tmotorVex393TurboSpeed_HBridge, openLoop)
#pragma config(Motor,  port2,           frontRight,    tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port3,           frontLeft,     tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port4,           backRight,     tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port5,           backLeft,      tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port6,           tlLauncher,    tmotorVex393HighSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port7,           trLauncher,    tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port8,           brLauncher,    tmotorVex393HighSpeed_MC29, openLoop, reversed, encoderPort, I2C_2)
#pragma config(Motor,  port9,           blLauncher,    tmotorVex393HighSpeed_MC29, openLoop, encoderPort, I2C_1)
#pragma config(Motor,  port10,          treadmill2,    tmotorVex393TurboSpeed_HBridge, openLoop)

#pragma platform(VEX)

// Competition Control and Duration Settings
#pragma competitionControl(Competition)
#include "Vex_Competition_Includes.c"   //Main competition background code...do not modify!

// Vex Motor Definitions
#define vexMotorMax 127
#define vexMotorMin -127
#define vexMotorOff 0

// Change this to change button set high speed on Flywheel
#define HIGH_SPEED_BUTTON72 Btn7D
#define HIGH_SPEED_BUTTON59 Btn7U

// LCD Display Variables
int count = 0;
const short leftButton = 1;
const short centerButton = 2;
const short rightButton = 4;

// Dead Zone Variables
int X2 = 0, Y1 = 0, X1 = 0, threshold = 15;

// Struct to hold flywheel values
typedef struct{
	float TargetSpeed;
	float CurrentSpeed;
} flywheel, treadmill;
flywheel fw;
treadmill feed;

// Function to update Flywheel Speed
void UpdateFlySpeed()
{
	fw.CurrentSpeed = fw.TargetSpeed;
	motor[tlLauncher] = fw.CurrentSpeed;
	motor[trLauncher] = fw.CurrentSpeed;
	motor[brLauncher] = fw.CurrentSpeed;
	motor[blLauncher] = fw.CurrentSpeed;
}


// Function to update Flywheel Speed
void UpdateTreadmillSpeed()
{
	feed.CurrentSpeed = feed.TargetSpeed;
	motor[treadmill1] = feed.CurrentSpeed;
	motor[treadmill2] = feed.CurrentSpeed;
}

// Creates a deadzone for your motors
void deadZoneCheck()
{

	//Create "deadzone" for Y1/Ch3
	if(abs(vexRT[Ch1]) > threshold)
		Y1 = vexRT[Ch1];
	else
		Y1 = 0;
	//Create "deadzone" for X1/Ch1
	if(abs(vexRT[Ch4]) > threshold)
		X1 = vexRT[Ch4];
	else
		X1 = 0;
	//Create "deadzone" for X2/Ch4
	if(abs(vexRT[Ch3]) > threshold)
		X2 = vexRT[Ch3];
	else
		X2 = 0;
}

// Converts a Decimal to Motor Speed
float percentToMotorSpeed( float percentInDecimal )
{
	return( percentInDecimal * vexMotorMax );
}

//~~~ auton methods~~~//

// Stops the motors associated with the flywheel
void fw_stop()
{
	motor[tlLauncher] = vexMotorOff;
	motor[trLauncher] = vexMotorOff;
	motor[brLauncher] = vexMotorOff;
	motor[blLauncher] = vexMotorOff;
}

// Sets the speed based on a decimal percentage you input
void fw_setSpeed( int percentageSpeedInDecimal ) //Because you wan to use percentage??
{
	float speed;
	speed = percentToMotorSpeed( percentageSpeedInDecimal );
	motor[tlLauncher] = speed;
	motor[trLauncher] = speed;
	motor[brLauncher] = speed;
	motor[blLauncher] = speed;
}

// Sets the TreadMill Speed
void fw_treadmill(int speed = 127)
{
	motor[treadmill1] = feed.CurrentSpeed;
	motor[treadmill2] = feed.CurrentSpeed;
}

//~~~ auton methods~~~//

task Drive
{
	while(true)
	{
		deadZoneCheck();

		// Remote Control Commands
		motor[frontLeft] = Y1  -X2  -X1;
		motor[frontRight]= Y1  +X2  -X1;
		motor[backLeft]  = Y1  -X2  +X1;
		motor[backRight] = Y1  +X2  +X1;
		
		// dont hog CPU
		wait1Msec(30);
	}
}

// waits for a LCD button to be pressed
void waitForPress()
{
	while(nLCDButtons == 0){}
	wait1Msec(5);
}

// waits for a LCD button to be released
void waitForRelease()
{
	while(nLCDButtons != 0){}
	wait1Msec(5);
}

// Shows the battery of the Primary and Backup Batterys
string mainBattery, backupBattery;
void showBatteryLevel()
{
	bLCDBacklight = true;
	displayLCDString(0, 0, "Primary: ");
	sprintf(mainBattery, "%1.2f%c", nImmediateBatteryLevel/1000.0,'V');
	displayNextLCDString(mainBattery);

	displayLCDString(1, 0, "Backup: ");
	sprintf(backupBattery, "%1.2f%c", BackupBatteryLevel/1000.0, 'V');
	displayNextLCDString(backupBattery);
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                          Pre-Autonomous Functions
//
// You may want to perform some actions before the competition starts. Do them in the
// following function.
//
/////////////////////////////////////////////////////////////////////////////////////////

void pre_auton()
{
	// Set bStopTasksBetweenModes to false if you want to keep user created tasks running between
	// Autonomous and Tele-Op modes. You will need to manage all user created tasks if set to false.

	bStopTasksBetweenModes = false;

	clearLCDLine(0);
	clearLCDLine(1);
	bLCDBacklight = true;
	
	while(nLCDButtons != centerButton)
	{
		switch(count){
		case 0:

			displayLCDCenteredString(0, "4 Ball Launch");
			displayLCDCenteredString(1, "<		 Enter		>");
			waitForPress();


			if(nLCDButtons == rightButton)
			{
				waitForRelease();
				count++;
			}
			break;

		case 1:
			displayLCDCenteredString(0, "2");
			displayLCDCenteredString(1, "<		 Enter		>");
			waitForPress();
			if(nLCDButtons == leftButton)
			{
				waitForRelease();
				count--;
			}

			else if(nLCDButtons == rightButton)
			{
				waitForRelease();
				count++;
			}
			break;

		case 2:
			displayLCDCenteredString(0, "3");
			displayLCDCenteredString(1, "<		 Enter		>");
			waitForPress();

			if(nLCDButtons == leftButton)
			{
				waitForRelease();
				count--;
			}

		case 3:
			displayLCDCenteredString(0, "4");
			displayLCDCenteredString(1, "<		 Enter		>");
			waitForPress();

			if(nLCDButtons == leftButton)
			{
				waitForRelease();
				count--;
			}

			else if(nLCDButtons == rightButton)
			{
				waitForRelease();
				count++;
			}
			break;

		case 4:
			displayLCDCenteredString(0, "5");
			displayLCDCenteredString(1, "<		 Enter		>");
			waitForPress();
			if(nLCDButtons == leftButton)
			{
				waitForRelease();
				count--;
			}

			else if(nLCDButtons == rightButton)
			{
				waitForRelease();
				count++;
			}
			break;

		case 5:
			displayLCDCenteredString(0, "6");
			displayLCDCenteredString(1, "<		 Enter		>");
			waitForPress();
			if(nLCDButtons == leftButton)
			{
				waitForRelease();
				count--;
			}

			else if(nLCDButtons == rightButton)
			{
				waitForRelease();
				count++;
			}
			break;

		case 6:
			displayLCDCenteredString(0, "7");
			displayLCDCenteredString(1, "<		 Enter		>");
			waitForPress();
			if(nLCDButtons == leftButton)
			{
				waitForRelease();
				count--;
			}

			else if(nLCDButtons == rightButton)
			{
				waitForRelease();
				count++;
			}
			break;

			showBatteryLevel();

			wait1Msec(100);

			waitForPress();
			if(nLCDButtons == leftButton)
			{
				waitForRelease();
				count--;
			}
			else if(nLCDButtons == rightButton)
			{
				waitForRelease();
				count = 0;
			}
			break;
		default:
			count = 0;
			break;

		}
	}
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 Autonomous Task
//
// This task is used to control your robot during the autonomous phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task autonomous()
{

	bLCDBacklight = true;
	clearLCDLine(0);
	clearLCDLine(1);

	switch(count){

	case 0:
		displayLCDCenteredString(0, "4 Ball Launch");
		displayLCDCenteredString(1, "is running!");
		wait1Msec(500);
		//autonomous goes here

		fw_setSpeed(0.62);//startup
		wait1Msec(3000);
		fw_stop();

		fw_setSpeed(0.62);//launch ball 1
		fw_treadmill();
		wait1Msec(500);
		fw_stop();

		fw_setSpeed(0.62);//cooldown
		wait1Msec(3000);
		fw_stop();

		fw_setSpeed(0.62);//launch ball 2
		fw_treadmill();
		wait1Msec(500);
		fw_stop();

		fw_setSpeed(0.62);//cooldown
		wait1Msec(3000);
		fw_stop();

		fw_setSpeed(0.62);//launch ball 3
		fw_treadmill();
		wait1Msec(500);
		fw_stop();

		fw_setSpeed(0.62);//cooldown
		wait1Msec(3000);
		fw_stop();

		fw_setSpeed(0.62);//launch ball 4
		fw_treadmill();
		wait1Msec(500);
		fw_stop();

		break;

	case 1:
		displayLCDCenteredString(0, "2");
		displayLCDCenteredString(1, "is running!");
		wait1Msec(500);
		//autonomous goes here

		break;

	case 2:
		displayLCDCenteredString(0, "Nonpin (3)");
		displayLCDCenteredString(1, "is running!");
		wait1Msec(500);
		//autonomous goes here

		break;

	case 3:
		displayLCDCenteredString(0, "Blue Nonpin (6)");
		displayLCDCenteredString(1, "is running!");
		wait1Msec(500);
		//autonomous goes here

		break;

	case 4:
		displayLCDCenteredString(0, "Red Nonpin (6)");
		displayLCDCenteredString(1, "is running!");
		wait1Msec(500);
		//autonomous goes here

		break;

	case 5:
		displayLCDCenteredString(0, "NOTHING YET");
		displayLCDCenteredString(1, "is running!");
		wait1Msec(500);
		//autonomous goes here

		break;

	case 6:
		displayLCDCenteredString(0, "NOTHING YET");
		displayLCDCenteredString(1, "is running!");
		wait1Msec(500);
		//autonomous goes here

		break;


	default:
		displayLCDCenteredString(0, "No valid choice");
		displayLCDCenteredString(1, "was made!");
		break;

	}
}


/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 User Control Task
//
// This task is used to control your robot during the user control phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

bool buttonPreviouslyPressed = false;
int iteration72;
int iteration59;
void waitForReleaseSpeedButton()
{
	if(vexRT[Btn8L] == 0)
	{
		iteration72 = 0;
		buttonPreviouslyPressed = false;
	}
	if(vexRT[Btn8U] == 0)
	{
		iteration59 = 0;
		buttonPreviouslyPressed = false;
	}
	else
	{
		wait1Msec(5);
	}
}

task usercontrol()
{
	
	// Start the drive task to let you drive! with included deadzone :)
	startTask( Drive );

	while (true)
	{

		showBatteryLevel();
		
		if(vexRT[Btn8L] == 1)
		{
			fw.TargetSpeed = 72;
		}
		else if(vexRT[Btn8U] == 1)
		{
			fw.TargetSpeed = 59;
		}
		else if(vexRT[Btn8D] == 1 || vexRT[Btn8R] == 1)
		{
			fw.TargetSpeed = vexMotorOff;
		}
		
		// up to 127 for 9 iterations button
		if(vexRT[Btn7U] == 1 && iteration72 >= 9)
		{
			fw.TargetSpeed = 127;
			iteration72++;
		}
		else if(vexRT[Btn7D] == 1 && iteration59 >= 9)
		{
			fw.TargetSpeed = 127;
			iteration59++;
		}
		
		if(iteration72 == 10){ waitForReleaseSpeedButton(); fw.TargetSpeed = 72; }
		if(iteration59 == 10){ waitForReleaseSpeedButton(); fw.TargetSpeed = 59; }
		
		// Feed Control
		if(vexRT[Btn6U] == 1)							// if button is Pressed
		{
			feed.TargetSpeed = 127;
		}
		else															// Otherwise
		{
			feed.TargetSpeed = vexMotorOff;
		}
		
		UpdateFlySpeed();
		UpdateTreadmillSpeed();
		
		// dont hog CPU
		wait1Msec(30);

	}
}
